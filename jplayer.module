<?php
/**
 * @file
 * Provides an HTML5-compatible with Flash-fallback audio player.
 *
 * This module provides functionality for loading the jPlayer library and
 * formatters for File Fields.
 */

/**
 * Implements hook_menu().
 */
function jplayer_menu() {
  $items = array();

  $items['admin/config/media/jplayer'] = array(
    'title' => 'jPlayer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jplayer_settings_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the settings for the jPlayer module.',
    'file' => 'includes/jplayer.admin.inc',
  );
  
  $items['transcript/submitted'] = array(
      'title' => t('All done!'),
      'page callback' => 'submit_redirect_transcript',
      'access callback' => TRUE,      
  );
  
  $items['annotation/submitted'] = array(
      'title' => t('All done!'),
      'page callback' => 'submit_redirect_annotation',
      'access callback' => TRUE,      
  );
  
  /* For modal windows, for annotation
  $items['content/cannotator/%ctools_js'] = array(
      'title' => t('Annotator (Controlled)'),
      'page arguments' => array(2),
      'page callback' => 'cannotation_callback',
      'access callback' => TRUE,
  );
  
  $items['content/uannotator/%ctools_js'] = array(
      'title' => t('Annotator (Uncontrolled)'),
      'page arguments' => array(2),
      'page callback' => 'uannotation_callback',
      'access callback' => TRUE,
  ); */
  
  return $items;
}

/****************************************************************************
 *******************************CUSTOM STUFF*********************************
 ****************************************************************************/

/* For modal windows, for annotation
function cannotation_callback($js = NULL) {
    if($js) {
        ctools_add_js('ajax-responder');
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Annotation Form'),
        );
        $output = ctools_modal_form_wrapper('cannotation_form', $form_state);
        print ajax_render($output);
        drupal_exit();
    }
    else {
        return drupal_get_form('cannotation_form');
    }
}

function uannotation_callback($js = NULL) {
    if($js) {
        ctools_add_js('ajax-responder');
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Annotation Form'),
        );
        $output = ctools_modal_form_wrapper('uannotation_form', $form_state);
        print ajax_render($output);
        drupal_exit();
    }
    else {
        return drupal_get_form('uannotation_form');
    }
}

function cannotation_form() {
    $form = array();
    
    $form['list'] = array(
        '#type' => 'select',
        '#title' => t('Choose annotation'),
        '#options' => array(t('Select'), t('Label 1'), t('Label 2'), t('Label 3'), t('Label 4')),
    );
    
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
        '#submit' => array('cannotation_submit'),
    );
    
    return $form;
}

function uannotation_form() {
    $form = array();
    
    $form['text'] = array(
        '#type' => 'textfield',
        '#title' => t('Enter text here'),
    );
    
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
        '#submit' => array('uannotation_submit'),
    );
    
    return $form;
}

function cannotation_submit($form, &$form_state) {
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = ctools_ajax_command_redirect('<front>');
    print ajax_render($commands);
}

function uannotation_submit($form, &$form_state) {
    
}*/

/**
 * Implements hook_help().
 */
function jplayer_help($path, $arg)
{
    switch($path) {
        case "admin/help#jplayer":
            return '<p>' . t("Plays audio to be transcribed!") . '</p>';
            break;
    }
}

/**
 * Implements hook_block_info().
 */
function jplayer_block_info()
{    
    $blocks['options'] = array(
        'info' => t('Options'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    /* For modal windows, for annotation
    $blocks['controlled_annotation'] = array(
        'info'  => t('Controlled annotation link'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    
    $blocks['uncontrolled_annotation'] = array(
        'info'  => t('Uncontrolled annotation link'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    
    $blocks['transcription'] = array(
        'info'  => t('Transcription link'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );*/
    
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function jplayer_block_view($delta = '')
{    
    /* For modal windows, for annotation
    ctools_include('modal');
    ctools_modal_add_js();
    $links['controlled_annotation'] = l('Annotate (controlled)', 'content/cannotator/nojs', array('attributes' => array('class' => 'ctools-use-modal')));
    $links['uncontrolled_annotation'] = l('Annotate (uncontrolled)', 'content/uannotator/nojs', array('attributes' => array('class' => 'ctools-use-modal')));*/
   
    $block = array();
    switch($delta) {
        case 'options':
            $block['content'] = drupal_get_form('getOptionsForm');
            break;
        /* For modal windows, for annotation
        case 'controlled_annotation':
            $block['content'] = $links['controlled_annotation'];
            break;
        case 'uncontrolled_annotation':
            $block['content'] = $links['uncontrolled_annotation'];
            break;
        case 'transcription':
            $block['content'] = drupal_get_form('getOptionsForm');
            break;*/
    }
    return $block;
}

/**
 * Options form function
 */
function getOptionsForm() {
    $form = array();
    $form['transcribe'] = array(
        '#type' => 'submit',
        '#value' => t('Transcribe'),
        '#submit' => array('transcribe_handler'),
    );
    $form['annotate'] = array(
        '#type' => 'submit',
        '#value' => t('Annotate'),
        '#submit' => array('annotate_handler'),
    );
    return $form;
}

/**
 * Submit button handlers for options form
 */
function transcribe_handler($form, &$form_state) {
    
    // Create new audio_player node with an associated webform
    create_player_node('Transcriber');    
    create_transcript_webform_node();
    
    // Redirect to the transcriber
    drupal_goto('content/transcriber');
}

function annotate_handler($form, &$form_state) {
    
    // Create new audio_player node with an associated webform
    create_player_node('Annotator');
    create_annotation_webform_node();
    
    // Redirect to the annotator
    drupal_goto('content/annotator');
}

/**
 * Implements hook_init().
 */
function jplayer_init() {
    
    // Pause the player when user clicks ANNOTATE button
    drupal_add_js('jQuery(document).ready(function() {
        jQuery("#edit-annotate").click(function() {
            jQuery("*").jPlayer("pause");
        });
    });', 'inline');    // Using the * selector for now, but would be better if somehow the specific jplayer object ID could be obtained
    $action = 1;
    if(request_path() == 'content/transcriber') {
        $action = 0;        
    }
    if(request_path() == 'content/player') {
        $action = 1;
    }
    if(request_path() == 'content/annotator') {
        $action = 1;
    }
    drupal_add_js(array('jplayer' => array(
            'action' => $action,
    )), 'setting');
}

/**
 * 
 */
function create_player_node($content) {
    $node = new StdClass();
    $node->type = 'audio_player';
    node_object_prepare($node);
    
    $node->language = LANGUAGE_NONE;    
    $node->title = $content;
    $node->uid = 1;
    $node->promote = 0;
    $node->comment = 1;
    
    $alias = 'content/' . $content;
    $node->path = array('alias' => $alias);
    
    // Get node ID
    $result = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_player', ':title' => 'Player'));
    $nid = $result->fetchField(0);
    $temp_node = node_load($nid);
    $audio_url = $temp_node->field_audio[$temp_node->language][0];
    $node->field_audio[LANGUAGE_NONE][0] = $audio_url;
    node_save($node);
}

/**
 * Create a new webform node for transcript
 */
function create_transcript_webform_node() {
    
    // Basic node creation
    $node = new StdClass();
    $node->type = 'webform';
    node_object_prepare($node);
    $node->title = 'Transcript Form';
    $node->language = LANGUAGE_NONE;
    $node->body[LANGUAGE_NONE][0]['value'] = '';
    $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
    $node->uid = 1;
    $node->promote = 0;
    $node->comment = 1;
    
    // Get number of segments from the javascript file
    $cookie_name = 'seginfo';
    if(isset($_COOKIE[$cookie_name])) {
        $duration = $_COOKIE[$cookie_name];
        $segments = ceil($duration/5);
    }
    else {
        drupal_set_message(t('Try refreshing the page!'), 'warning');
        $segments = 1;
    }
    $maxSegments = 6;
    $MAX_PAGES = ceil($segments/$maxSegments);
    
    $COMP_PER_PAGE = $maxSegments + 1;
    
    // Create webform components: textfields and page breaks
    for($i=0; $i<$MAX_PAGES; $i++) {
        /* Set page number for javascript to access
        (array('jplayer' => array(
            drupal_add_js'pageinfo' => $i,
        )), 'setting');*/
        for($j=0; $j<$COMP_PER_PAGE; $j++) {
            
            $index = ($COMP_PER_PAGE*$i)+$j;
            // Check if the required number of segments are created
            if($index == ($segments+$MAX_PAGES-1)) {
                break;
            }
            
            if($index%$COMP_PER_PAGE == 6) {
                // Check if the required number of segments are created
                if($index == ($MAX_PAGES * $COMP_PER_PAGE)-1) {
                    break;
                }
                            
                // Page break component
                $number = $i+1;                
                $components[$index] = array(
                    'name' => 'Page ' . $number,
                    'form_key' => 'page_' . $number,
                    'type' => 'pagebreak',
                    'weight' => $index,
                    'pid' => 0,
                    'value' => '',
                    'extra' => array(
                        'next_page_label' => 'Next',
                        'prev_page_label' => 'Previous',
                        'private' => 0,
                    ),
                    'page_num' => $number,
                );
                
            }
            else {               
                
                // Textfield component
                $number = $index + 1 - $i;                
                $components[$index] = array(
                    'name' => 'Segment ' . $number,
                    'form_key' => 'segment_' . $number,
                    'type' => 'textfield',
                    'mandatory' => 1,
                    'weight' => $index,
                    'pid' => 0,
                    'extra' => array(
                        'title_display' => 'before',
                        'private' => 0,
                    ),
                    'page_num' => $i+1,
                );
            }
            
        }
    }
    
    /* Where to email it to?
    $emails = array(
        array(
            'email' => 'gurwinder@asu.edu',
            'subject' => 'default',
            'from_name' => 'default',
            'from_address'=> 'default',
            'template' => 'default',
            'excluded_components' => array(),
        ),
    );*/
    
    $node->webform = array(
        'confirmation' => '',
        'confirmation_format' => 'filtered_html',
        'redirect_url' => 'transcript/submitted',
        'status' => '1',
        'block' => '0',
        'teaser' => '0',
        'allow_draft' => '1',
        'auto_save' => '0',
        'submit_notice' => '1',
        'submit_text' => '',
        'submit_limit' => '-1',
        'submit_interval' => '-1',
        'total_submit_limit' => '-1',
        'total_submit_interval' => '-1',
        'progressbar_bar' => '1',
        'progressbar_page_number' => '0',
        'progressbar_percent' => '0',
        'progressbar_pagebreak_labels' => '0',
        'progressbar_include_confirmation' => '0',
        'progressbar_label_first' => 'Start',
        'progressbar_label_confirmation' => 'Complete',
        'preview' => '0',
        'preview_next_button_label' => '',
        'preview_prev_button_label' => '',
        'preview_title' => '',
        'preview_message' => '',
        'preview_message_format' => 'filtered_html',
        'preview_excluded_components' => 
        array (
        ),
        'record_exists' => TRUE,
        'roles' => array(
            0 => '1',
        ),
        //'emails' => $emails,
        'components' => $components,
    );
    
    // Save the node
    node_save($node);    
}

/**
 * Create a new webform node for transcript
 */
function create_annotation_webform_node() {
    
    // Get controlled taxonomy terms
    $string = '';
    $ctrl_term = taxonomy_get_tree(2, 0 , NULL, FALSE);
    foreach($ctrl_term as $term) {
        $string = $string . $term->name . '|' . $term->name . "\r\n";
    }
    
    // Basic node creation
    $node = new StdClass();
    $node->type = 'webform';
    node_object_prepare($node);
    $node->title = 'Annotation Form';
    $node->language = LANGUAGE_NONE;
    $node->body[LANGUAGE_NONE][0]['value'] = '';
    $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
    $node->uid = 1;
    $node->promote = 0;
    $node->comment = 1;
    
    $components = array(
        1 => array (
            'cid' => '1',
            'pid' => '0',
            'form_key' => 'type',
            'name' => 'Type',
            'type' => 'select',
            'value' => '',
            'extra' => array (
                'items' => 'ctrl|Controlled
uctrl|Uncontrolled',
                'multiple' => 0,
                'title_display' => 'before',
                'description_above' => 0,
                'private' => 0,
                'wrapper_classes' => '',
                'css_classes' => '',
                'aslist' => 0,
                'empty_option' => '',
                'optrand' => 0,
                'other_option' => NULL,
                'other_text' => 'Other...',
                'description' => '',
                'custom_keys' => false,
                'options_source' => '',
                'analysis' => true,
            ),
            'required' => '1',
            'weight' => '0',
            'page_num' => 1,
        ),
        2 => array (
            'cid' => '2',
            'pid' => '0',
            'form_key' => 'enter_annotation',
            'name' => 'Enter Annotation',
            'type' => 'textfield',
            'value' => '',
            'extra' => array (
                'title_display' => 'before',
                'description_above' => 0,
                'private' => 0,
                'wrapper_classes' => '',
                'css_classes' => '',
                'width' => '',
                'maxlength' => '',
                'field_prefix' => '',
                'field_suffix' => '',
                'disabled' => 0,
                'unique' => 0,
                'description' => '',
                'placeholder' => '',
                'attributes' => array (
                ),
                'analysis' => false,
            ),
            'required' => '1',
            'weight' => '1',
            'page_num' => 1,
        ),
        3 => array (
            'cid' => '3',
            'pid' => '0',
            'form_key' => 'select_annotation',
            'name' => 'Select Annotation',
            'type' => 'select',
            'value' => '',
            'extra' => array (
                'items' => $string,
                'multiple' => 0,
                'title_display' => 'before',
                'description_above' => 0,
                'private' => 0,
                'wrapper_classes' => '',
                'css_classes' => '',
                'aslist' => 0,
                'empty_option' => '',
                'optrand' => 0,
                'other_option' => NULL,
                'other_text' => 'Other...',
                'description' => '',
                'custom_keys' => false,
                'options_source' => '',
                'analysis' => true,
            ),
            'required' => '1',
            'weight' => '2',
            'page_num' => 1,
        ),       
    );
    
    $conditionals = array(       
        0 => array (
            'rgid' => '0',
            'andor' => NULL,
            'weight' => '-1',
            'rules' => array (
                0 => array (
                    'rgid' => '0',
                    'rid' => '0',
                    'source_type' => 'component',
                    'source' => '1',
                    'operator' => 'equal',
                    'value' => 'ctrl',
                ),
            ),
            'actions' => array (
                0 => array (
                    'rgid' => '0',
                    'aid' => '0',
                    'target_type' => 'component',
                    'target' => '3',
                    'invert' => '0',
                    'action' => 'show',
                    'argument' => '',
                ),
            ),
        ),
        1 => array (
            'rgid' => '1',
            'andor' => NULL,
            'weight' => '0',
            'rules' => array (
                0 => array (
                    'rgid' => '1',
                    'rid' => '0',
                    'source_type' => 'component',
                    'source' => '1',
                    'operator' => 'equal',
                    'value' => 'uctrl',
                ),
            ),
            'actions' => array (
                0 => array (
                    'rgid' => '1',
                    'aid' => '0',
                    'target_type' => 'component',
                    'target' => '2',
                    'invert' => '0',
                    'action' => 'show',
                    'argument' => '',
                ),
            ),
        ),
    );
    
    $node->webform = array(
        'next_serial' => '1',
        'confirmation' => '',
        'confirmation_format' => 'filtered_html',
        'redirect_url' => 'annotation/submitted',
        'status' => '1',
        'block' => '0',
        'allow_draft' => '0',
        'auto_save' => '0',
        'submit_notice' => '1',
        'confidential' => '0',
        'submit_text' => '',
        'submit_limit' => '-1',
        'submit_interval' => '-1',
        'total_submit_limit' => '-1',
        'total_submit_interval' => '-1',
        'progressbar_bar' => '0',
        'progressbar_page_number' => '0',
        'progressbar_percent' => '0',
        'progressbar_pagebreak_labels' => '0',
        'progressbar_include_confirmation' => '0',
        'progressbar_label_first' => 'Start',
        'progressbar_label_confirmation' => 'Complete',
        'preview' => '0',
        'preview_next_button_label' => '',
        'preview_prev_button_label' => '',
        'preview_title' => '',
        'preview_message' => '',
        'preview_message_format' => 'filtered_html',
        'preview_excluded_components' => array (
        ),
        'record_exists' => true,
        'roles' => array (
            0 => '1',
            1 => '2',
        ),
        'emails' => array (
        ),
        'components' => $components,
        'conditionals' => $conditionals,
    );
    
    node_save($node);
}

/**
 * Steps to take after the transcript webform is submitted
 */
function submit_redirect_transcript() {
    
    // Get the ID of the last complete submission
    $result = db_query("SELECT MAX(sid) FROM druq_webform_submissions WHERE is_draft = :val", array(':val' => 0));
    $sid = $result->fetchField(0);
    
    // Get the data of the last submission and save into an array
    $result = db_query("SELECT data FROM druq_webform_submitted_data WHERE sid = :sid", array(':sid' => $sid));
    $raw_data = array();
    $segment = 0;
    foreach($result as $record) {
        $raw_data[$segment++] = $record->data;
    }
    
    // Load the audio player and get the corresponding audio file node
    $result = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_player', ':title' => 'Player'));
    $nid = $result->fetchField(0);
    $temp_node = node_load($nid);
    $title = $temp_node->field_audio[$temp_node->language][0]['filename'];    
    $filename = str_replace('%20', ' ', $title);
    $result = db_query("SELECT * FROM druq_node WHERE type = :type AND title = :filename", array('type' => 'audio_file', ':filename' => $filename));
    $aid = $result->fetchField(0);
    
    // Format the data
    $txt_data = format_data_txt($raw_data);
    $xml_data = format_data_xml($raw_data, date('m/d/y H:i:s'));
    
    // Write transcript data to file
    $dest = 'public://transcripts/transcript' . $sid . '.xml';
    $file_object = file_save_data($xml_data, $dest, FILE_EXISTS_RENAME);
    if(!empty($file_object)) {
        create_transcript_node($aid, $dest, $xml_data, $txt_data);
        
        // Get node ID and delete the transcriber player
        $result1 = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_player', ':title' => 'Transcriber'));
        $nid1 = $result1->fetchField(0);
        node_delete($nid1);
        
        // Get node ID and delete the webform
        $result2 = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'webform', ':title' => 'Transcript Form'));
        $nid2 = $result2->fetchField(0);
        node_delete($nid2);        
        
        drupal_set_message(t('Your data has been saved'));
        return t('Your transcript can be downloaded from the \'All Transcripts\' page.');
    }
    else {
        // Get node ID and delete the transcriber player
        $result1 = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_player', ':title' => 'Transcriber'));
        $nid1 = $result1->fetchField(0);
        node_delete($nid1);
        
        // Get node ID and delete the transcript webform
        $result2 = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'webform', ':title' => 'Transcript Form'));
        $nid2 = $result2->fetchField(0);
        node_delete($nid2);
        
        drupal_set_message(t('Failed to save data'), 'error');        
        return t('Please try again.');
    }
}

/**
 * Steps to take after the annotation webform is submitted
 */
function submit_redirect_annotation() {
    
    // Get timestamp from the javascript file
    $cookie_name = 'timeinfo';
    if(isset($_COOKIE[$cookie_name])) {
        $timepoint = $_COOKIE[$cookie_name];
    }
    else {
        $timepoint = 0;
    }
    
    // Format the times tamp to HH:MM:SS
    $hours = sprintf('%02d', floor($timepoint / 3600));
    $mins = sprintf('%02d', floor(($timepoint - ($hours*3600)) / 60));
    $secs = sprintf('%02d', floor($timepoint % 60));
    $timestamp = $hours . ':' . $mins . ':' . $secs;
    
     // Load the audio player and get the corresponding audio file node
    $result = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_player', ':title' => 'Player'));
    $nid = $result->fetchField(0);
    $temp_node = node_load($nid);
    $title = $temp_node->field_audio[$temp_node->language][0]['filename'];    
    $filename = str_replace('%20', ' ', $title);
    $result = db_query("SELECT * FROM druq_node WHERE type = :type AND title = :filename", array('type' => 'audio_file', ':filename' => $filename));
    $aid = $result->fetchField(0);
    
    // Get the ID of the last complete submission
    $result = db_query("SELECT MAX(sid) FROM druq_webform_submissions", array(':val' => 0));
    $sid = $result->fetchField(0);
    
    // Get the data of the last submission and save into an array
    $result = db_query("SELECT data FROM druq_webform_submitted_data WHERE sid = :sid", array(':sid' => $sid));
    $raw_data = array();
    $i = 0;
    foreach($result as $record) {
        $raw_data[$i++] = $record->data;
    }
    
    // Create the taxonomy term and get term ID
    if($raw_data[0] == 'ctrl') {
        $data = $raw_data[2];
        $tid = get_tid($data, 'annotation_categories_controlled_');
        $type = 'controlled';
    }
    else {
        $data = $raw_data[1];
        $exists = create_taxonomy_term($data);
        if($exists == 0) {
            $tid = get_tid($data, 'annotation_categories_uncontrolled_');
            $type = 'uncontrolled';
        }
        else {
            $tid = get_tid($data, 'annotation_categories_controlled_');
            $type = 'controlled';
        }
    }
    
    // Check if the annotation already exists; create one if not
    $node_name = $filename . ' Annotation @ ' . $timestamp;
    $result = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'annotation', ':title' => $node_name));
    $anode = $result->fetchField(0);
    if($anode == NULL) {
        create_annotation_node($aid, $tid, $type, $timestamp);
    }
    else {
        modify_annotation_node($anode, $tid, $type);
    }
    
    // Get node ID and delete the annotator player
    $result1 = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_player', ':title' => 'Annotator'));
    $nid1 = $result1->fetchField(0);
    node_delete($nid1);
        
    // Get node ID and delete the annotation webform
    $result2 = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'webform', ':title' => 'Annotation Form'));
    $nid2 = $result2->fetchField(0);
    node_delete($nid2);        
        
    drupal_set_message(t('The annotation has been added!'));
    drupal_goto('content/player');
}

/**
 * Function to create a taxonomy term
 */
function create_taxonomy_term($new_term) {
    // Check if the term already exists in the controlled vocab
    $ctrl_vid = 2;
    $uctrl_vid = 3;
    $ctrl_term = taxonomy_get_tree($ctrl_vid, 0, NULL, FALSE);
    foreach($ctrl_term as $term) {
        if($new_term == $term->name) {
            drupal_set_message(t('The term already exists in the controlled vocabulary and will not be created.'), 'warning');
            return 1;
        }
    }
    $uctrl_term = taxonomy_get_tree($uctrl_vid, 0, NULL, FALSE);
    foreach($uctrl_term as $term) {
        if($new_term == $term->name) {
            drupal_set_message(t('The term already exists in the uncontrolled vocabulary and will not be created.'), 'warning');
            return 0;
        }
    }
    $term = new StdClass();
    $term->name = $new_term;
    $term->vid = $uctrl_vid; // For uncontrolled vocab    
    taxonomy_term_save($term);
    drupal_set_message(t('The term has been created!'));
    return 0;
}

/**
 * Function to get tid from term name
 */
function get_tid($term_name, $vocabulary) {
    $arr_terms = taxonomy_get_term_by_name($term_name, $vocabulary);
    if (!empty($arr_terms)) {
        $arr_terms = array_values($arr_terms);
        $tid = $arr_terms[0]->tid;
    }
    /*else {
        $vobj = taxonomy_vocabulary_machine_name_load($vocabulary);
        $term = new stdClass();
        $term->name = $term_name;
        $term->vid = $vobj->vid;
        taxonomy_term_save($term);
        $tid = $term->tid;
    }*/
    return $tid;
}

/**
 * Format the transcript to a timestamped text file
 */
function format_data_txt($raw_data) {
    
    $data = array();
    for($segment=0; $segment<count($raw_data); $segment++) {
        // Calculate the timestamp
        $seconds = $segment * 5;
        $hours = sprintf('%02d', floor($seconds / 3600));
        $mins = sprintf('%02d', floor(($seconds - ($hours*3600)) / 60));
        $secs = sprintf('%02d', floor($seconds % 60));
        $timestamp = $hours . ':' . $mins . ':' . $secs;
                
        // Concatenate the timestamp with the data
        $data[$segment] = $timestamp . ' ' . $raw_data[$segment];
    }
    $formatted_string = $data[0];
    for($segment=1; $segment<count($data); $segment++) {
        $formatted_string = $formatted_string . "\r\n" . $data[$segment];
    }
    return $formatted_string;    
}

/**
 * Format the data into a TEI compliant XML file
 */
function format_data_xml($raw_data, $submit_time) {
    
    // Get username
    global $user;    
    $author = $user->name;
    $author_email = $user->mail;
    
    // Get number of segments from the javascript file
    $cookie_name = 'seginfo';
    if(isset($_COOKIE[$cookie_name])) {
        $duration = $_COOKIE[$cookie_name];
    }
    $segments = ceil($duration/5);
    
    $hours = sprintf('%02d', floor($duration / 3600));
    $mins = sprintf('%02d', floor(($duration - ($hours*3600)) / 60));
    $secs = sprintf('%02d', floor($duration % 60));
    $timestamp = $hours . ':' . $mins . ':' . $secs;
    
    // Get node ID
    $result = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_player', ':title' => 'Player'));
    $nid = $result->fetchField(0);
    
    // Load the player node and get the file name + URL
    $node = node_load($nid);
    $audio_file_raw = $node->field_audio[$node->language][0]['filename'];
    $audio_file = str_replace('%20', ' ', $audio_file_raw);
    $audio_path = $node->field_audio[$node->language][0]['uri'];
    
    // Load the audio file and get file order
    $result = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_file', ':title' => $audio_file));
    $audio_nid = $result->fetchField(0);
    $audio_file_node = node_load($audio_nid);
    $file_order = $audio_file_node->field_interview_file_order[$audio_file_node->language][0]['value'];
    
    // Get collection (distributor?)
    $collection_nid = $audio_file_node->field_collection[$audio_file_node->language][0]['target_id'];
    $collection_node = node_load($collection_nid);
    $distributor = $collection_node->title;
    
    // XML File
    $formatted_string = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n"
            . "<TEI>\r\n"
            . "\t<teiHeader>\r\n"
            . "\t\t<fileDesc>\r\n"
            . "\t\t\t<titleStmt>\r\n"
            . "\t\t\t\t<title>" . $audio_file . " Transcription</title>\r\n"
            . "\t\t\t\t<author>" . $author . "</author>\r\n"
            . "\t\t\t\t<respStmt>\r\n"
            . "\t\t\t\t\t<resp>Transcription of audio into text</resp>\r\n"
            . "\t\t\t\t</respStmt>\r\n"
            . "\t\t\t</titleStmt>\r\n"
            . "\t\t\t<extent>" . $timestamp . "</extent>\r\n"
            . "\t\t\t<publicationStmt>\r\n"
            . "\t\t\t\t<distributor>" . $distributor . "</distributor>\r\n"
            . "\t\t\t\t<availability><p>Available for educational and research purposes.</p></availability>\r\n"
            . "\t\t\t</publicationStmt>\r\n"
            . "\t\t\t<sourceDesc>\r\n"
            . "\t\t\t\t<recordingStmt>\r\n"
            . "\t\t\t\t\t<recording type=\"audio\" corresp=\"" . $audio_path . "\"/>\r\n"
            . "\t\t\t\t</recordingStmt>\r\n"
            . "\t\t\t</sourceDesc>\r\n"
            . "\t\t</fileDesc>\r\n"
            . "\t\t<encodingDesc>\r\n"
            . "\t\t\t<editorialDecl>\r\n"
            . "\t\t\t\t<normalization>\r\n"
            . "\t\t\t\t\t<p>The words on the recording should be written down in normal spelling using \"dictionary spelling.\" Transcribers should not attempt to use special spellings to represent pronunciation. The test is whether the spelling can be found in a standard dictionary. Some words may not be in a standard dictionary; transcribers should just do the best they can on those, and mark them with ?.</p>\r\n"
            . "\t\t\t\t</normalization>\r\n"
            . "\t\t\t\t<interpretation>\r\n"
            . "\t\t\t\t\t<p>Transcribers should not try to force the words into grammatical sentences, but instead should write down what people actually say, even if it appears to be ungrammatical (this is quite normal in conversation). Transcribers should mark \"sentence units\" (word groups thought by the transcriber to hold together in some way) with a capital letter at the beginning, and a period and one space at the end. Other use of caps and periods should be limited, and periods should not be followed by spaces unless at the end of a sentence unit. Proper names should be capitalized, but no caps or periods should be used with titles like mr or mrs or dr, and other abbreviations should be avoided as much as possible. Use ? to mark questions. Do not use : or ; and use the comma as little as possible (only when the interpretation of the utterance would otherwise be unclear to the user).</p>\r\n"
            . "\t\t\t\t</interpretation>\r\n"
            . "\t\t\t</editorialDecl>\r\n"
            . "\t\t</encodingDesc>\r\n"
            . "\t\t<revisionDesc>\r\n"
            . "\t\t\t<change who=\"" . $author . "\"  contact=\"" . $author_email . "\" when=\"" . $submit_time . "\"> Transcribed interview audio.</change>\r\n"
            . "\t\t</revisionDesc>\r\n"
            . "\t</teiHeader>\r\n"
            . "\t<text>\r\n"
            . "\t\t<body>\r\n"
            . "\t\t\t<timeline origin=\"#TS-p1\" unit=\"s\">\r\n"
            . "\t\t\t\t<when xml:id=\"TS-p1\" absolute=\"00:00:00\"/>\r\n";
    
    for($i=2; $i<=$segments+1; $i++) {
        $formatted_string .= "\t\t\t\t<when xml:id=\"TS-p" . $i . "\" interval=\"5.0\" since=\"TS-p" . ($i-1) . "\"/>\r\n";
    }
    
    $formatted_string = $formatted_string . "\t\t\t</timeline>\r\n"
            . "\t\t\t<div type=\"audio file\" n=\"" . $file_order . "\">\r\n";
    
    for($i=0; $i<$segments; $i++) {
        $formatted_string = $formatted_string. "\t\t\t\t<seg xml:id=\"TS-u" . ($i+1) . "\" start=\"#TS-p" . ($i+1) . "\" end=\"#TS-p" . ($i+2) . "\">\r\n"
                . "\t\t\t\t\t<u>\r\n\t\t\t\t\t" . $raw_data[$i] . "\r\n\t\t\t\t\t</u>\r\n"
                . "\t\t\t\t</seg>\r\n";
    }
    
    $formatted_string = $formatted_string . "\t\t\t</div>\r\n"
            . "\t\t</body>\r\n"
            . "\t</text>\r\n"
            . "</TEI>\r\n";
    
    return $formatted_string;    
}

/**
 * Create a new node for the transcript
 */
function create_transcript_node($aid, $filepath, $data, $txt_data) {
    
    // Basic node creation
    $node = new stdClass();
    $node->type = 'transcript';
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
    
    // Get file name
    $result = db_query('SELECT * FROM druq_node WHERE type = :type AND title = :title', array(':type' => 'audio_player', ':title' => 'Player'));
    $nid = $result->fetchField(0);
    $temp_node = node_load($nid);
    $title = $temp_node->field_audio[$temp_node->language][0]['filename'];
    $filename = str_replace('%20', ' ', $title);
    $node->title = $filename . ' Transcript';
    
    $node->status = 1;
    $node->promote = 0;
    $node->comment = 1;
    
    //$node->path = array('alias' => 'transcript/submitted');
    
    
    // Add body
    $node->body[LANGUAGE_NONE][0]['value'] = $txt_data;
    
    // Add entity reference to audio
    $node->field_audio_file[$node->language][0]['target_id'] = $aid;
            
    // Add file
    $file = new stdClass();
    $file->uid = 1;
    $file->uri = $filepath;
    $file->filemime = file_get_mimetype($file->uri);
    $file->status = 1;
    $file->display = 1;
    $file = file_copy($file, 'public://');
    $node->field_transcript_download[LANGUAGE_NONE][0] = (array)$file;
    
    node_save($node);
}

/**
 * Create a new node for the transcript
 */
function create_annotation_node($aid, $tid, $type, $timestamp) {
    // Basic node creation
    $node = new stdClass();
    $node->type = 'annotation';
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
    
    $temp_node = node_load($aid);
    $title = $temp_node->field_remote_file_url[$temp_node->language][0]['filename'];
    $title = str_replace('%20', ' ', $title);
    $node->title = $title . ' Annotation @ ' . $timestamp;
    
    $node->status = 1;
    $node->promote = 0;
    $node->comment = 1;    
    
    // Add entity reference to audio
    $node->field_annotation_audio_file[$node->language][0]['target_id'] = $aid;
    
    // Add annotations
    if($type == 'controlled') {
        $node->field_controlled_annotations[$node->language][]['tid'] = $tid;
    }
    else {
        $node->field_uncontrolled_annotations[$node->language][]['tid'] = $tid;
    }
    
    // Add timestamp
    $node->field_timestamp[$node->language][0]['value'] = $timestamp;
    
    node_save($node);
}

/**
 * Function to add terms to existing annotation nodes
 */
function modify_annotation_node($anode, $tid, $type) {
    $node = node_load($anode);
    // Add annotations
    if($type == 'controlled') {
        $node->field_controlled_annotations[$node->language][]['tid'] = $tid;
    }
    else {
        $node->field_uncontrolled_annotations[$node->language][]['tid'] = $tid;
    }
    node_save($node);
}

/****************************************************************************
 *****************************END OF CUSTOM STUFF****************************
 ****************************************************************************/

/**
 * Implements hook_theme().
 */
function jplayer_theme() {
  return array(
    'jplayer' => array(
      'template' => 'theme/jplayer',
      'variables' => array(
        'entity_type' => NULL,
        'entity' => NULL,
        'field_name' => NULL,
        'items' => array(),
        'settings' => array(),
        'type' => '',
        'playlist' => '',
      ),
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_item_list' => array(
      'render element' => 'element',
      'file' => 'includes/jplayer.theme.inc',
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      ),
    ),
    'jplayer_view_playlist' => array(
      'template' => 'theme/jplayer',
      'arguments' => array('view' => NULL, 'items' => NULL),
      'file' => 'includes/jplayer.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function jplayer_field_formatter_info() {
  return array(
    'jplayer_player' => array(
      'label' => t('jPlayer - Player'),
      'field types' => array('file'),
      'description' => t('Display file fields as an HTML5-compatible with Flash-fallback media player.'),
      'settings' => array(
        'autoplay' => 0,
        'solution' => 'html, flash',
        'preload' => 'metadata',
        'volume' => 80,
        'muted' => FALSE,
        'repeat' => 'none',
        'backgroundColor' => '000000',
        'mode' => 'playlist',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function jplayer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'jplayer_player':
      if (!empty($items)) {
        $output = theme(
          'jplayer',
          array(
            'entity_type' => $entity_type,
            'entity' => $entity,
            'field_name' => $instance['field_name'],
            'items' => $items,
            'settings' => $display['settings'],
          )
        );
      }
      else {
        return array();
      }
      $element[0] = array(
        '#markup' => $output,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function jplayer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  if ($display['type'] == 'jplayer_player') {
    $form['mode'] = array(
      '#title' => t('Kind'),
      '#type' => 'select',
      '#options' => array(
        'single' => t('Single'),
        'playlist' => t('Playlist'),
      ),
      '#default_value' => $settings['mode'],
    );

    $form['autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'select',
      '#options' => array(
        0 => t('No'),
        1 => t('Yes'),
      ),
      '#default_value' => $settings['autoplay'],
    );

    $form['solution'] = array(
      '#title' => t('Preferred solution'),
      '#type' => 'select',
      '#options' => array(
        'html, flash' => t('HTML5'),
        'flash, html' => t('Flash'),
      ),
      '#default_value' => $settings['solution'],
    );

    $form['preload'] = array(
      '#title' => t('Preload media'),
      '#type' => 'select',
      '#options' => array(
        'metadata' => t('No'),
        'auto' => t('Yes'),
      ),
      '#description' => t("Preloading media before it's requested isn't available in all browsers."),
      '#default_value' => $settings['preload'],
    );

    $form['volume'] = array(
      '#title' => t('Initial volume'),
      '#type' => 'textfield',
      '#field_suffix' => '%',
      '#maxlength' => 3,
      '#size' => 3,
      '#default_value' => $settings['volume'],
      '#element_validate' => array('jplayer_volume_check'),
    );

    $form['muted'] = array(
      '#title' => t('Initially muted'),
      '#type' => 'select',
      '#options' => array(
        FALSE => t('No'),
        TRUE => t('Yes'),
      ),
      '#default_value' => $settings['muted'],
    );

    $form['repeat'] = array(
      '#title' => t('Repeat'),
      '#type' => 'select',
      '#options' => array(
        'all' => t('All'),
        'single' => t('Single'),
        'none' => t('None'),
      ),
      '#default_value' => $settings['repeat'],
    );

    $form['backgroundColor'] = array(
      '#title' => t('Background color'),
      '#type' => 'textfield',
      '#field_preffix' => '#',
      '#maxlength' => 6,
      '#size' => 6,
      '#default_value' => $settings['backgroundColor'],
    );
  }

  return $form;
}

/**
 * Element validation to check volume is between 0 and 100.
 */
function jplayer_volume_check($element, &$form_state) {
  $value = $element['#value'];

  if ($value < 0 || $value > 100) {
    form_set_error($element, t('Volume must be a percentage between 0% and 100%.'));
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jplayer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'jplayer_player') {
    if (isset($settings['autoplay']) && $settings['autoplay'] == 1) {
      $summary = t('Single jPlayer instance which autoplays.');
    }
    else {
      $summary = t('Single jPlayer instance.');
    }
  }

  return $summary;
}

/**
 * Implements hook_library().
 */
function jplayer_library() {
  $path = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  $libraries = array();
  $libraries['jplayer'] = array(
    'title' => 'jPlayer',
    'website' => 'http://www.jplayer.org',
    'version' => '2.0',
    'js' => array(
      $path . '/jquery.jplayer.min.js' => array(),
    ),
  );
  return $libraries;
}

/**
 * Return the version of jPlayer installed.
 *
 * @param $directory
 *   The directory to check for a jPlayer installation.
 *
 * @return
 *   An array containing 'version', 'major, and 'minor' keys representing the
 *   version of jPlayer installed, or FALSE if a valid version number was not
 *   found.
 */
function jplayer_get_version($directory = NULL) {
  $version = 0;

  if (!isset($directory)) {
    $directory = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  }

  if (file_exists($directory . '/jquery.jplayer.min.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.min.js');
  }
  elseif (file_exists($directory . '/jquery.jplayer.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.js');
  }
  else {
    return false;
  }

  $matches = array();
  preg_match('/Version:?[ ]*([\d.]+)/i', $contents, $matches);

  if (isset($matches[1])) {
    $version = $matches[1];
  }

  $parts = explode('.', $version);

  // Though other parts of the module may check for a specific version,
  // checking for a positive integer is more of a sanity check here.
  if ($version < 1 || !isset($parts[0]) || !isset($parts[1])) {
    return FALSE;
  }

  return array('version' => $version, 'major' => $parts[0], 'minor' => $parts[1]);
}

/**
 * Add core JS and CSS needed for jPlayer instances
 */
function jplayer_add_core_js() {
  $added = &drupal_static(__FUNCTION__, FALSE);
  if ($added) {
    // Js was already loaded.
    return;
  }
  $added = TRUE;

  // Add global settings
  $settings = array(
    'jPlayer' => array(
      'swfPath' => base_path() . variable_get('jplayer_directory', 'sites/all/libraries/jplayer'),
      'showHour' => (boolean)variable_get('jplayer_showHour', FALSE),
      'showMin' => (boolean)variable_get('jplayer_showMin', TRUE),
      'showSec' => (boolean)variable_get('jplayer_showSec', TRUE),
      'padHour' => (boolean)variable_get('jplayer_padHour', FALSE),
      'padMin' => (boolean)variable_get('jplayer_padMin', TRUE),
      'padSec' => (boolean)variable_get('jplayer_padSec', TRUE),
      'sepHour' => variable_get('jplayer_sepHour', ':'),
      'sepMin' => variable_get('jplayer_sepMin', ':'),
      'sepSec' => variable_get('jplayer_sepSec', ''),
    ),
  );
  drupal_add_js($settings, array('type' => 'setting'));

  $return = array(
    '#attached' => array(
      'library' => array(
        array('jplayer', 'jplayer'),
      ),
      'js' => array(
        drupal_get_path('module', 'jplayer') . '/theme/jplayer.js' => array('type' => 'file', 'scope' => 'footer', 'group' => JS_DEFAULT),
      ),
      'css' => array(
        drupal_get_path('module', 'jplayer') . '/theme/jplayer.css' => array('type' => 'file', 'group' => CSS_DEFAULT),
      ),
    ),
  );

  // Allow other modules to add resources to the page when a jPlayer is
  // embedded.
  if ($additional_resources = module_invoke_all('jplayer_add_js')) {
    $return['additional_resources'] = $additional_resources;
  }

  return $return;
}

/**
 * Implements hook_views_api().
 */
function jplayer_views_api() {
  return array(
    'path' => drupal_get_path('module', 'jplayer') . '/includes',
    'api' => 3.0,
  );
}

