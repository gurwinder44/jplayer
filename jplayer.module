<?php
/**
 * @file
 * Provides an HTML5-compatible with Flash-fallback audio player.
 *
 * This module provides functionality for loading the jPlayer library and
 * formatters for File Fields.
 */

/**
 * Implements hook_menu().
 */
function jplayer_menu() {
  $items = array();

  $items['admin/config/media/jplayer'] = array(
    'title' => 'jPlayer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jplayer_settings_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the settings for the jPlayer module.',
    'file' => 'includes/jplayer.admin.inc',
  );
  
  $items['transcript/submitted'] = array(
      'title' => t('All done!'),
      'page callback' => 'submit_redirect',
      'access callback' => TRUE,
  );
  
  return $items;
}

/**
 * Implements hook_help().
 */
function jplayer_help($path, $arg)
{
    switch($path) {
        case "admin/help#jplayer":
            return '<p>' . t("Plays audio to be transcribed!") . '</p>';
            break;
    }
}

/**
 * Implements hook_block_info().
 *
function jplayer_block_info()
{    
    $blocks['transcriptform'] = array(
        'info'  => t('Transciption form block'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    return $blocks;
}*/

/**
 * Implements hook_block_view().
 *
function jplayer_block_view($delta = '')
{
    $block = array();
    switch($delta) {
        case 'transcriptform':
            //$block['subject'] = t('Subject');
            //$block['content'] = drupal_get_form('jplayer_form');
            $block['content'] = getForm();
            break;
    }
    return $block;
}*/

/**
 * Implements hook_init().
 */
function jplayer_init() {
    // Check if the persistent variable 'first_time' has been set
    if(request_path() == 'content/transcriber-player') {
        $flag = variable_get('first_time');
        if(!isset($flag)) {
            create_webform_node();
        }
    }
}

/**
 * Master form function
 */
function jplayer_form($form, &$form_state)
{
    
    if(isset($form_state['values'])) {
        $currStep = $form_state['step'] + 1;
    }
    else {
        $currStep = 0;
    }
    
    $form_state['step'] = $currStep;
    $allSteps = getForm();
    
    // Set page number for javascript to access
     drupal_add_js(array('jplayer' => array(
            'pageinfo' => $currStep
        )), 'setting');
     
    $currForm = $allSteps[$currStep];
    
    return $currForm;    
}

/**
 * Auxiliary function to get number of pages
 */
function getNumberOfSteps() {
    return count(getForm());
}

/**
 * Form builder function
 */
function getForm()
{   
    $form = array();
    
    // Get segments from cookie set by javascript file
    $cookie_name = 'seginfo';
    if(isset($_COOKIE[$cookie_name])) {
        $segments = $_COOKIE[$cookie_name];
    }
    else {
        drupal_set_message(t('Try refreshing the page!'), 'warning');
        $segments = 1;
    }
    
    $maxSegments = 6;
    $maxPages = ceil($segments/$maxSegments);
    
    for($i=1; $i<=$maxPages; $i++) {
        
        $step[$i] = array();
        
        $step[$i]['page'] = array(
            '#type' => 'fieldset',
            '#title' => t('Page @number of @total', array('@number' => $i, '@total' => $maxPages)),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
        );
        
        for($j=1; $j<=$maxSegments; $j++) {
            
            $segNo = (($i-1)*6) + $j;
            if($segNo > $segments) {
                break;
            }
            
            $step[$i]['page'][$j] = array(
                '#type' => 'textfield',
                '#title' => t('Segment @number', array('@number' => $segNo)),
                '#default_value' => NULL,
                '#attributes' => array('placeholder' => t('Enter text here'))
            );    
        }
        
        if($i == $maxPages) {
            $step[$i]['next'] = array(
                '#type' => 'submit',
                '#value' => t('Submit'),
            );
        }
        
        else {
            $step[$i]['next'] = array(
                '#type' => 'submit',
                '#value' => t('Next Page'),
            );
        }
    
        $form[] = $step[$i];
    }
    
    return $form;
}

/**
 * Form submission
 *
function jplayer_form_submit($form, &$form_state)
{   
    $cookie_name = 'seginfo';
    if(isset($_COOKIE[$cookie_name])) {
        $segments = $_COOKIE[$cookie_name];
    }
    /* Write data of current page to database
    for($i=1; $i<=6; $i++) {
        $id = ($form_state['step']*6) + $i;
        if($id > $segments) {
            break;
        }
        db_insert('transcript')->fields(array(
            'tid' => $id,
            'text' => $form_state['values'][$i],
            'audio_id' => 0,
        ))->execute();
    }*
    if($form_state['step']+1 != getNumberofSteps()) {
        // Save values of current page
        $form_state['storage'][$form_state['step']] = $form_state['values'];        
        // Need to generate next page
        $form_state['rebuild'] = TRUE;
    }
    else {
        // Save the last page
        $form_state['storage'][$form_state['step']] = $form_state['values'];
        
        // Prepare the data to write
        $data = '';
        for($i=0; $i<=$form_state['step']; $i++) {
            for($j=1; $j<=6; $j++) {
                $max = ($i*6) + $j;
                if($max > $segments) {
                    break;
                }
                $data = $data . $form_state['storage'][$i][$j] . ' ';
            }
            $data = $data . "\r\n";
        }
        
        $id = REQUEST_TIME;
        // Write transcript data to file
        $dest = 'public://transcripts/transcript' . $id . '.txt';
        $uri = $dest;
        $file_object = file_save_data($data, $uri, FILE_EXISTS_RENAME);
        if(!empty($file_object)) {
            drupal_set_message(t('Your data has been saved! You can see it below.'));
            create_transcript_node($uri, $data);
            drupal_goto('transcript/submitted');
        }
        else {
            drupal_set_message(t('Failed to save data. Please try again.'), 'error');
            drupal_goto('content/transcriber');
        }
    }
}*/

/**
 * Function for new page upon submission
 */
function submit_redirect() {
    
    // Get the ID of the last complete submission
    $result = db_query("SELECT MAX(sid) FROM webform_submissions WHERE is_draft = :val", array(':val' => 0));
    $sid = $result->fetchField(0);
    
    // Get the data of the last submission and save into an array
    $result = db_query("SELECT data FROM webform_submitted_data WHERE sid = :sid", array(':sid' => $sid));
    $raw_data = array();
    $segment = 0;
    foreach($result as $record) {
        $raw_data[$segment++] = $record->data;
    }
    
    // Format the data
    $txt_data = format_data_txt($raw_data);
    $xml_data = format_data_xml($raw_data, date('m/d/y H:i:s'));
    
    // Write transcript data to file
    $dest = 'public://transcripts/transcript' . $sid . '.xml';
    $file_object = file_save_data($xml_data, $dest, FILE_EXISTS_RENAME);
    if(!empty($file_object)) {
        create_transcript_node($dest, $xml_data);
        //variable_del('first_time');
        drupal_set_message(t('Your data has been saved'));
        return t('Your transcript will be emailed to you');
    }
    else {
        //variable_del('first_time');
        drupal_set_message(t('Failed to save data'), 'error');        
        return t('Please try again.');
    }
}

/**
 * Format the transcript to a timestamped text file
 */
function format_data_txt($raw_data) {
    
    $data = array();
    for($segment=0; $segment<count($raw_data); $segment++) {
        // Calculate the timestamp
        $seconds = $segment * 5;
        $hours = sprintf('%02d', floor($seconds / 3600));
        $mins = sprintf('%02d', floor(($seconds - ($hours*3600)) / 60));
        $secs = sprintf('%02d', floor($seconds % 60));
        $timestamp = $hours . ':' . $mins . ':' . $secs;
                
        // Concatenate the timestamp with the data
        $data[$segment] = $timestamp . ' ' . $raw_data[$segment];
    }
    $formatted_string = $data[0];
    for($segment=1; $segment<count($data); $segment++) {
        $formatted_string = $formatted_string . "\r\n" . $data[$segment];
    }
    return $formatted_string;    
}

/**
 * Format the data into a TEI compliant XML file
 */
function format_data_xml($raw_data, $submit_time) {
    
    // Get username
    global $user;    
    $author = $user->name;
    $author_email = $user->mail;
    
    // Get number of segments from the javascript file
    $cookie_name = 'seginfo';
    if(isset($_COOKIE[$cookie_name])) {
        $duration = $_COOKIE[$cookie_name];
    }
    $segments = ceil($duration/5);
    
    $hours = sprintf('%02d', floor($duration / 3600));
    $mins = sprintf('%02d', floor(($duration - ($hours*3600)) / 60));
    $secs = sprintf('%02d', floor($duration % 60));
    $timestamp = $hours . ':' . $mins . ':' . $secs;
    
    $distributor = "SocialScribe";
    
    // Get node ID
    $result = db_query('SELECT * FROM node WHERE type = :transcriber', array(':transcriber' => 'transcriber'));
    $nid = $result->fetchField(0);
    
    // Load the node and get the file name
    $node = node_load($nid);
    $audio_file = $node->field_audio['und'][0]['filename'];
    
    $audio_path = "Local";
    
    // XML File
    $formatted_string = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n"
            . "<TEI>\r\n"
            . "\t<teiHeader>\r\n"
            . "\t\t<fileDesc>\r\n"
            . "\t\t\t<titleStmt>\r\n"
            . "\t\t\t\t<title>" . $audio_file . " Transcription</title>\r\n"
            . "\t\t\t\t<author>" . $author . "</author>\r\n"
            . "\t\t\t\t<respStmt>\r\n"
            . "\t\t\t\t\t<resp>Transcription of audio into text</resp>\r\n"
            . "\t\t\t\t</respStmt>\r\n"
            . "\t\t\t</titleStmt>\r\n"
            . "\t\t\t<extent>" . $timestamp . "</extent>\r\n"
            . "\t\t\t<publicationStmt>\r\n"
            . "\t\t\t\t<distributor>" . $distributor . "</distributor>\r\n"
            . "\t\t\t\t<availability><p>Available for educational and research purposes.</p></availability>\r\n"
            . "\t\t\t</publicationStmt>\r\n"
            . "\t\t\t<sourceDesc>\r\n"
            . "\t\t\t\t<recordingStmt>\r\n"
            . "\t\t\t\t\t<recording type=\"audio\" corresp=\"" . $audio_path . "\"/>\r\n"
            . "\t\t\t\t</recordingStmt>\r\n"
            . "\t\t\t</sourceDesc>\r\n"
            . "\t\t</fileDesc>\r\n"
            . "\t\t<encodingDesc>\r\n"
            . "\t\t\t<editorialDecl>\r\n"
            . "\t\t\t\t<normalization>\r\n"
            . "\t\t\t\t\t<p>The words on the recording should be written down in normal spelling using \"dictionary spelling.\" Transcribers should not attempt to use special spellings to represent pronunciation. The test is whether the spelling can be found in a standard dictionary. Some words may not be in a standard dictionary; transcribers should just do the best they can on those, and mark them with ?.</p>\r\n"
            . "\t\t\t\t</normalization>\r\n"
            . "\t\t\t\t<interpretation>\r\n"
            . "\t\t\t\t\t<p>Transcribers should not try to force the words into grammatical sentences, but instead should write down what people actually say, even if it appears to be ungrammatical (this is quite normal in conversation). Transcribers should mark \"sentence units\" (word groups thought by the transcriber to hold together in some way) with a capital letter at the beginning, and a period and one space at the end. Other use of caps and periods should be limited, and periods should not be followed by spaces unless at the end of a sentence unit. Proper names should be capitalized, but no caps or periods should be used with titles like mr or mrs or dr, and other abbreviations should be avoided as much as possible. Use ? to mark questions. Do not use : or ; and use the comma as little as possible (only when the interpretation of the utterance would otherwise be unclear to the user).</p>\r\n"
            . "\t\t\t\t</interpretation>\r\n"
            . "\t\t\t</editorialDecl>\r\n"
            . "\t\t<encodingDesc>\r\n"
            . "\t\t<revisionDesc>\r\n"
            . "\t\t\t<change who=\"" . $author . "\"  contact=\"" . $author_email . "\" when=\"" . $submit_time . "\"> Transcribed interview audio.</change>\r\n"
            . "\t\t</revisionDesc>\r\n"
            . "\t</teiHeader>\r\n"
            . "\t<text>\r\n"
            . "\t\t<body>\r\n"
            . "\t\t\t<timeline origin=\"#TS-p1\" unit=\"s\">\r\n"
            . "\t\t\t\t<when xml:id=\"TS-p1\" absolute=\"00:00:00\"/>\r\n";
    
    for($i=2; $i<=$segments+1; $i++) {
        $formatted_string .= "\t\t\t\t<when xml:id=\"TS-p" . $i . "\" interval=\"5.0\" since=\"TS-p" . ($i-1) . "\"/>\r\n";
    }
    
    $formatted_string = $formatted_string . "\t\t\t</timeline>\r\n"
            . "\t\t\t<div type=\"audio file\" n=\"FILE_ORDER\">\r\n";
    
    for($i=0; $i<$segments; $i++) {
        $formatted_string = $formatted_string. "\t\t\t\t<seg xml:id=\"TS-u" . ($i+1) . "\" start=\"#TS-p" . ($i+1) . "\" end=\"#TS-p" . ($i+2) . "\">\r\n"
                . "\t\t\t\t\t<u>\r\n\t\t\t\t\t" . $raw_data[$i] . "\r\n\t\t\t\t\t</u>\r\n"
                . "\t\t\t\t</seg>\r\n";
    }
    
    $formatted_string = $formatted_string . "\t\t\t</div>\r\n"
            . "\t\t</body>\r\n"
            . "\t</text>\r\n"
            . "</TEI>\r\n";
    
    return $formatted_string;
    
}

/**
 * Create a new node for the transcript
 */
function create_transcript_node($filepath, $data) {
    
    // Basic node creation
    $node = new stdClass();
    $node->type = 'transcript';
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
    
    $id = REQUEST_TIME;
    $node->title = $id;
    $node->status = 1;
    $node->promote = 0;
    $node->comment = 1;
    
    //$node->path = array('alias' => 'transcript/submitted');
    
    
    // Add body
    $node->body[LANGUAGE_NONE][0]['value'] = $data;
    
    // Add entity reference to audio
    
            
    // Add file
    $file = new stdClass();
    $file->uid = 1;
    $file->uri = $filepath;
    $file->filemime = file_get_mimetype($file->uri);
    $file->status = 1;
    $file->display = 1;
    $file = file_copy($file, 'public://');
    $node->field_transcript_download[LANGUAGE_NONE][0] = (array)$file;
    
    node_save($node);
}

/**
 * Create a new webform node
 */
function create_webform_node() {
    
    // Basic node creation
    $node = new StdClass();
    $node->type = 'webform';
    node_object_prepare($node);
    $node->title = 'Transcript Form';
    $node->language = LANGUAGE_NONE;
    $node->body[LANGUAGE_NONE][0]['value'] = '';
    $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
    $node->uid = 1;
    $node->promote = 0;
    $node->comment = 1;
    
    // Get number of segments from the javascript file
    $cookie_name = 'seginfo';
    if(isset($_COOKIE[$cookie_name])) {
        $duration = $_COOKIE[$cookie_name];
        $segments = ceil($duration/5);
    }
    else {
        drupal_set_message(t('Try refreshing the page!'), 'warning');
        $segments = 1;
    }
    $maxSegments = 6;
    $MAX_PAGES = ceil($segments/$maxSegments);
    
    $COMP_PER_PAGE = $maxSegments + 1;
    
    // Create webform components: textfields and page breaks
    for($i=0; $i<$MAX_PAGES; $i++) {
        /* Set page number for javascript to access
        drupal_add_js(array('jplayer' => array(
            'pageinfo' => $i,
        )), 'setting');*/
        for($j=0; $j<$COMP_PER_PAGE; $j++) {
            
            $index = ($COMP_PER_PAGE*$i)+$j;
            // Check if the required number of segments are created
            if($index > ($segments+$MAX_PAGES-1)) {
                break;
            }
            
            if($index%$COMP_PER_PAGE == 6) {
                // Check if the required number of segments are created
                if($index == ($MAX_PAGES * $COMP_PER_PAGE)-1) {
                    break;
                }
                            
                // Page break component
                $number = $i+1;                
                $components[$index] = array(
                    'name' => 'Page ' . $number,
                    'form_key' => 'page_' . $number,
                    'type' => 'pagebreak',
                    'weight' => $index,
                    'pid' => 0,
                    'value' => '',
                    'extra' => array(
                        'next_page_label' => 'Next',
                        'prev_page_label' => 'Previous',
                        'private' => 0,
                    ),
                    'page_num' => $number,
                );
                
            }
            else {               
                
                // Textfield component
                $number = $index + 1 - $i;                
                $components[$index] = array(
                    'name' => 'Segment ' . $number,
                    'form_key' => 'segment_' . $number,
                    'type' => 'textfield',
                    'mandatory' => 1,
                    'weight' => $index,
                    'pid' => 0,
                    'extra' => array(
                        'title_display' => 'before',
                        'private' => 0,
                    ),
                    'page_num' => $i+1,
                );
            }
            
        }
    }
    
    // Where to email it to?
    $emails = array(
        array(
            'email' => 'gurwinder@asu.edu',
            'subject' => 'default',
            'from_name' => 'default',
            'from_address'=> 'default',
            'template' => 'default',
            'excluded_components' => array(),
        ),
    );
    
    $node->webform = array(
        'confirmation' => '',
        'confirmation_format' => 'filtered_html',
        'redirect_url' => 'transcript/submitted',
        'status' => '1',
        'block' => '0',
        'teaser' => '0',
        'allow_draft' => '1',
        'auto_save' => '0',
        'submit_notice' => '1',
        'submit_text' => '',
        'submit_limit' => '-1',
        'submit_interval' => '-1',
        'total_submit_limit' => '-1',
        'total_submit_interval' => '-1',
        'record_exists' => TRUE,
        'roles' => array(
            0 => '1',
        ),
        'emails' => $emails,
        'components' => $components,
    );
    
    // Set the 'first_time' variable so that this webform is not created again
    variable_set('first_time', 10);
    
    // Save the node
    node_save($node);
    
}

/**
 * Implements hook_theme().
 */
function jplayer_theme() {
  return array(
    'jplayer' => array(
      'template' => 'theme/jplayer',
      'variables' => array(
        'entity_type' => NULL,
        'entity' => NULL,
        'field_name' => NULL,
        'items' => array(),
        'settings' => array(),
        'type' => '',
        'playlist' => '',
      ),
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_item_list' => array(
      'render element' => 'element',
      'file' => 'includes/jplayer.theme.inc',
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      ),
    ),
    'jplayer_view_playlist' => array(
      'template' => 'theme/jplayer',
      'arguments' => array('view' => NULL, 'items' => NULL),
      'file' => 'includes/jplayer.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function jplayer_field_formatter_info() {
  return array(
    'jplayer_player' => array(
      'label' => t('jPlayer - Player'),
      'field types' => array('file'),
      'description' => t('Display file fields as an HTML5-compatible with Flash-fallback media player.'),
      'settings' => array(
        'autoplay' => 0,
        'solution' => 'html, flash',
        'preload' => 'metadata',
        'volume' => 80,
        'muted' => FALSE,
        'repeat' => 'none',
        'backgroundColor' => '000000',
        'mode' => 'playlist',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function jplayer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'jplayer_player':
      if (!empty($items)) {
        $output = theme(
          'jplayer',
          array(
            'entity_type' => $entity_type,
            'entity' => $entity,
            'field_name' => $instance['field_name'],
            'items' => $items,
            'settings' => $display['settings'],
          )
        );
      }
      else {
        return array();
      }
      $element[0] = array(
        '#markup' => $output,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function jplayer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  if ($display['type'] == 'jplayer_player') {
    $form['mode'] = array(
      '#title' => t('Kind'),
      '#type' => 'select',
      '#options' => array(
        'single' => t('Single'),
        'playlist' => t('Playlist'),
      ),
      '#default_value' => $settings['mode'],
    );

    $form['autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'select',
      '#options' => array(
        0 => t('No'),
        1 => t('Yes'),
      ),
      '#default_value' => $settings['autoplay'],
    );

    $form['solution'] = array(
      '#title' => t('Preferred solution'),
      '#type' => 'select',
      '#options' => array(
        'html, flash' => t('HTML5'),
        'flash, html' => t('Flash'),
      ),
      '#default_value' => $settings['solution'],
    );

    $form['preload'] = array(
      '#title' => t('Preload media'),
      '#type' => 'select',
      '#options' => array(
        'metadata' => t('No'),
        'auto' => t('Yes'),
      ),
      '#description' => t("Preloading media before it's requested isn't available in all browsers."),
      '#default_value' => $settings['preload'],
    );

    $form['volume'] = array(
      '#title' => t('Initial volume'),
      '#type' => 'textfield',
      '#field_suffix' => '%',
      '#maxlength' => 3,
      '#size' => 3,
      '#default_value' => $settings['volume'],
      '#element_validate' => array('jplayer_volume_check'),
    );

    $form['muted'] = array(
      '#title' => t('Initially muted'),
      '#type' => 'select',
      '#options' => array(
        FALSE => t('No'),
        TRUE => t('Yes'),
      ),
      '#default_value' => $settings['muted'],
    );

    $form['repeat'] = array(
      '#title' => t('Repeat'),
      '#type' => 'select',
      '#options' => array(
        'all' => t('All'),
        'single' => t('Single'),
        'none' => t('None'),
      ),
      '#default_value' => $settings['repeat'],
    );

    $form['backgroundColor'] = array(
      '#title' => t('Background color'),
      '#type' => 'textfield',
      '#field_preffix' => '#',
      '#maxlength' => 6,
      '#size' => 6,
      '#default_value' => $settings['backgroundColor'],
    );
  }

  return $form;
}

/**
 * Element validation to check volume is between 0 and 100.
 */
function jplayer_volume_check($element, &$form_state) {
  $value = $element['#value'];

  if ($value < 0 || $value > 100) {
    form_set_error($element, t('Volume must be a percentage between 0% and 100%.'));
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jplayer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'jplayer_player') {
    if (isset($settings['autoplay']) && $settings['autoplay'] == 1) {
      $summary = t('Single jPlayer instance which autoplays.');
    }
    else {
      $summary = t('Single jPlayer instance.');
    }
  }

  return $summary;
}

/**
 * Implements hook_library().
 */
function jplayer_library() {
  $path = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  $libraries = array();
  $libraries['jplayer'] = array(
    'title' => 'jPlayer',
    'website' => 'http://www.jplayer.org',
    'version' => '2.0',
    'js' => array(
      $path . '/jquery.jplayer.min.js' => array(),
    ),
  );
  return $libraries;
}

/**
 * Return the version of jPlayer installed.
 *
 * @param $directory
 *   The directory to check for a jPlayer installation.
 *
 * @return
 *   An array containing 'version', 'major, and 'minor' keys representing the
 *   version of jPlayer installed, or FALSE if a valid version number was not
 *   found.
 */
function jplayer_get_version($directory = NULL) {
  $version = 0;

  if (!isset($directory)) {
    $directory = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  }

  if (file_exists($directory . '/jquery.jplayer.min.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.min.js');
  }
  elseif (file_exists($directory . '/jquery.jplayer.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.js');
  }
  else {
    return false;
  }

  $matches = array();
  preg_match('/Version:?[ ]*([\d.]+)/i', $contents, $matches);

  if (isset($matches[1])) {
    $version = $matches[1];
  }

  $parts = explode('.', $version);

  // Though other parts of the module may check for a specific version,
  // checking for a positive integer is more of a sanity check here.
  if ($version < 1 || !isset($parts[0]) || !isset($parts[1])) {
    return FALSE;
  }

  return array('version' => $version, 'major' => $parts[0], 'minor' => $parts[1]);
}

/**
 * Add core JS and CSS needed for jPlayer instances
 */
function jplayer_add_core_js() {
  $added = &drupal_static(__FUNCTION__, FALSE);
  if ($added) {
    // Js was already loaded.
    return;
  }
  $added = TRUE;

  // Add global settings
  $settings = array(
    'jPlayer' => array(
      'swfPath' => base_path() . variable_get('jplayer_directory', 'sites/all/libraries/jplayer'),
      'showHour' => (boolean)variable_get('jplayer_showHour', FALSE),
      'showMin' => (boolean)variable_get('jplayer_showMin', TRUE),
      'showSec' => (boolean)variable_get('jplayer_showSec', TRUE),
      'padHour' => (boolean)variable_get('jplayer_padHour', FALSE),
      'padMin' => (boolean)variable_get('jplayer_padMin', TRUE),
      'padSec' => (boolean)variable_get('jplayer_padSec', TRUE),
      'sepHour' => variable_get('jplayer_sepHour', ':'),
      'sepMin' => variable_get('jplayer_sepMin', ':'),
      'sepSec' => variable_get('jplayer_sepSec', ''),
    ),
  );
  drupal_add_js($settings, array('type' => 'setting'));

  $return = array(
    '#attached' => array(
      'library' => array(
        array('jplayer', 'jplayer'),
      ),
      'js' => array(
        drupal_get_path('module', 'jplayer') . '/theme/jplayer.js' => array('type' => 'file', 'scope' => 'footer', 'group' => JS_DEFAULT),
      ),
      'css' => array(
        drupal_get_path('module', 'jplayer') . '/theme/jplayer.css' => array('type' => 'file', 'group' => CSS_DEFAULT),
      ),
    ),
  );

  // Allow other modules to add resources to the page when a jPlayer is
  // embedded.
  if ($additional_resources = module_invoke_all('jplayer_add_js')) {
    $return['additional_resources'] = $additional_resources;
  }

  return $return;
}

/**
 * Implements hook_views_api().
 */
function jplayer_views_api() {
  return array(
    'path' => drupal_get_path('module', 'jplayer') . '/includes',
    'api' => 3.0,
  );
}

